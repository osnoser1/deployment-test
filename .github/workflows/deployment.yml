name: Deploy Release PR

on:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.PAT }}
jobs:
  deploy-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch range from main to current HEAD
        run: |
          git fetch origin main --depth=1

      - name: Find open release PR
        id: find_pr
        run: |
          # Find the open PR with title starting with "release:"
          PR_URL=$(gh pr list --state open --json url,title --jq '.[] | select(.title | startswith("release: ")).url')
          if [[ -z "$PR_URL" ]]; then
            echo "No release PR found!"
            exit 1
          fi
          echo "Found release PR: $PR_URL"
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      - name: Validate if PR is mergeable
        run: |
          PR_STATUS=$(gh pr view $PR_URL --json mergeable -q ".mergeable")
          echo "PR_STATUS: $PR_STATUS"
          if [[ "$PR_STATUS" != "MERGEABLE" ]]; then
            echo "PR is not mergeable!"
            exit 1
          fi

      - name: Checkout PR branch
        run: |
          PR_BRANCH=$(gh pr view $PR_URL --json headRefName -q '.headRefName')
          git fetch origin $PR_BRANCH:$PR_BRANCH
          git checkout $PR_BRANCH

      - name: Identify last non-merge commit
        run: |
          LAST_NON_MERGE_COMMIT=$(git log origin/main..HEAD --no-merges --format="%H" -n 1)
          echo "LAST_NON_MERGE_COMMIT=$LAST_NON_MERGE_COMMIT" >> $GITHUB_ENV

      - name: Make GitHub release
        run: |
          # Extract version from PR title
          TAG_NAME=$(gh pr view $PR_URL --json title -q '.title | sub("release: "; "")')
          gh release create $TAG_NAME --target $LAST_NON_MERGE_COMMIT --generate-notes

      - name: Merge PR into main branch
        run: |
          gh pr merge $PR_URL --squash
